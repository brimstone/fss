#!/bin/sh
set -ue
command_exists () {
	command -v "$@" >/dev/null 2>&1
}
DEBUGLEVEL="1"
log(){
	level="$1"
	shift
	[ $DEBUGLEVEL -ge $level ] && echo "==> $@" || :
}
debug(){
	log 2 "DEBUG: $@"
}
info(){
	log 1 "INFO: $@"
}
warn(){
	log 0 "WARNING: $@"
}
error(){
	log 0 "ERROR: $@"
}
embed_templates(){
	cd templates
	for f in *; do
		echo "template_$(echo "$f" | tr '.' '_')(){"
		echo "cat <<DOG"
		cat "$f"
		echo "DOG"
		echo "}"
	done
}
while [ $# -gt 0 ]; do
	case "$1" in
		--debug)
			shift
			DEBUGLEVEL="2"
		;;
		--silent)
			shift
			DEBUGLEVEL="0"
		;;
		embed)
			shift
			embed_templates
			exit
		;;
		concat)
			shift
			cat "$0"
			$0 embed
			cat "$@"
			exit
		;;
		*)
			break
		;;
	esac
	shift
done
FSSVERSION="0.0.2-2-g939d75c"
package () {
	NAME=""
	VERSION=""
	PACKAGE=""
	MANAGER=""
	usage="Error calling packages:
package \"name\"
         -or-
package --name     \"name\"         \\
        --file     \"path/to/file\" \\
        --version  \"version\"      \\
        --apt                     \\
        --yum
"
	debug "package(\"$@\")"
	# Too few args
	if [ $# -lt 1 ]; then
		echo "Too few arguments"
		echo "$usage"
		return 1
	# First case
	elif [ $# = 1 ]; then
		if [ -f "$1" ]; then
			PACKAGE="$1"
		else
			NAME="$1"
		fi
	# Remaining cases
	else
		while [ $# -gt 0 ]; do
			case "$1" in 
				--name)
					shift
					NAME="$1"
				;;
				--file)
					shift
					PACKAGE="$1"
				;;
				--version)
					shift
					VERSION="$1"
				;;
				--apt)
					shift
					MANAGER="apt"
				;;
				--yum)
					shift
					MANAGER="yum"
				;;
				*)
					echo "Unknown option: $1"
					echo "$usage"
					return 1
				;;
			esac
			shift
		done
	fi
	# Check to make sure something set our required variables
	if [ -z "$NAME" -a -z "$PACKAGE" ]; then
		error "Missing Package name or file"
		echo "$usage"
		return 1
	fi
	# Figure out our package manager
	if [ -z "$MANAGER" ]; then
		if command_exists "apt-get" || command_exists "apt"; then
			MANAGER="apt"
		elif command_exists "yum"; then
			MANAGER="yum"
		fi
	fi
	# Actually do the magic
	case "$MANAGER" in
		"apt")
			if command_exists "apt"; then
				apt install -y "$NAME"
			else
				apt-get install -y "$NAME"
			fi
		;;
		"yum")
			yum install "$NAME"
		;;
		*)
			error "Unknown package manager $MANAGER"
			return 1
		;;
	esac
}
template () {
	SRC=""
	DEST=""
	MODE=""
	CHUSER=""
	CHGROUP=""
	usage="Error calling template:
template \"srcfile\" \"dest\"
         -or-
template --src   \"srcfile\"  \\
         --dist  \"distfile\" \\
         --mode  755        \\
         --user  root       \\
         --group root
"
	debug "template(\"$@\")"
	# Too few args
	if [ $# -lt 2 ]; then
		echo "Too few arguments"
		echo "$usage"
		return 1
	# First case
	elif [ $# = 2 ]; then
		SRC="$1"
		DIST="$2"
	# Remaining cases
	else
		while [ $# -gt 0 ]; do
			case "$1" in 
				--src)
					shift
					SRC="$1"
				;;
				--dist)
					shift
					DIST="$1"
				;;
				--mode)
					shift
					MODE="$1"
				;;
				--user)
					shift
					CHUSER="$1"
				;;
				--group)
					shift
					CHGROUP="$1"
				;;
				*)
					echo "Unknown option: $1"
					echo "$usage"
					return 1
				;;
			esac
			shift
		done
	fi
	# Determine our function name
	func="template_$(echo "$SRC" | tr '.' '_')"
	if [ -z "$DIST" ]; then
		echo "template: Missing DIST"
		echo "$usage"
		return 1
	fi
	info "template called: '$SRC' '$DIST'"
	# Actually do the magic
	(
		if ! $func 2>/dev/null; then
			# Check to make sure something set our required variables
			if [ -f "$SRC" -a ! -z "$SRC" ]; then
				SRC=$SRC
			elif [ -f "templates/$SRC" -a ! -z "templates/$SRC" ]; then
				SRC="templates/$SRC"
			else
				echo "template: Missing SRC"
				echo "$usage"
				return 1
			fi
			(
				echo "cat <<DOG"
				cat "$SRC"
				echo "DOG"
			) | sh
		fi
	) > "$DIST"
	# Post creation tasks
	if [ -n "$MODE" ]; then
		if command_exists chmod; then
			chmod "$MODE" "$DIST"
		else
			echo "No such command chmod"
			return 1
		fi
	fi
	if [ -n "$CHUSER" ]; then
		if command_exists chown; then
			chown "$CHUSER" "$DIST"
		else
			echo "No such command chown"
			return 1
		fi
	fi
	if [ -n "$CHGROUP" ]; then
		if command_exists chgrp; then
			chgrp "$CHGROUP" "$DIST"
		else
			echo "No such command chgrp"
			return 1
		fi
	fi
	# TODO Determine if we did real work
}
trap "run_fss $@" EXIT
run_fss_file() {
	if [ ! -f "$1" ]; then
		error "$1 not a file"
		exit 1
	fi
	info "Running $1"
	(
		BASE="${1%/*}"
		[ -d "$BASE" ] && cd "$BASE"
		. "./${1##*/}"
	)
}
run_fss_directory() {
	if [ ! -d "$1" ]; then
		return 1
	fi
	info "Running all in $1"
	for s in $( ls "$1"/* | sort || ls "$1"/* ); do
		[ -f "$s" ] && run_fss_file "$s" || :
	done
}
run_fss() {
	tail -n 1 "$0" | grep -q "^ # FSS Last Line Marker$" || return
	if [ $# = 0 ]; then
		if ! run_fss_directory "scripts"; then
			error "scripts directory missing and no scripts passed via cmdline!" >&2
			exit 1
		fi
	else
		while [ $# -gt 0 ]; do
			[ -d "$1" ] && run_fss_directory "$1" || :
			[ -f "$1" ] && run_fss_file "$1" || :
			shift
		done
	fi
}
echo "fss version $FSSVERSION"
 # FSS Last Line Marker
